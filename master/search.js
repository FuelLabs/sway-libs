var SEARCH_INDEX={"core":[{"html_filename":"trait.AsRawSlice.html","module_info":["core","raw_slice"],"name":"AsRawSlice","preview":"Trait to return a type as a <code>raw_slice</code>.\n","type_name":"trait"},{"html_filename":"fn.from_str_array.html","module_info":["core","str"],"name":"from_str_array","preview":"","type_name":"function"},{"html_filename":"trait.Add.html","module_info":["core","ops"],"name":"Add","preview":"Trait for the addition of two values.\n","type_name":"trait"},{"html_filename":"trait.Subtract.html","module_info":["core","ops"],"name":"Subtract","preview":"Trait for the subtraction of two values.\n","type_name":"trait"},{"html_filename":"trait.Multiply.html","module_info":["core","ops"],"name":"Multiply","preview":"Trait for the multiplication of two values.\n","type_name":"trait"},{"html_filename":"trait.Divide.html","module_info":["core","ops"],"name":"Divide","preview":"Trait for the division of two values.\n","type_name":"trait"},{"html_filename":"trait.Mod.html","module_info":["core","ops"],"name":"Mod","preview":"Trait for the modulo of two values.\n","type_name":"trait"},{"html_filename":"trait.Not.html","module_info":["core","ops"],"name":"Not","preview":"Trait to invert a type.\n","type_name":"trait"},{"html_filename":"trait.Eq.html","module_info":["core","ops"],"name":"Eq","preview":"Trait to evaluate if two types are equal.\n","type_name":"trait"},{"html_filename":"trait.Ord.html","module_info":["core","ops"],"name":"Ord","preview":"Trait to evaluate if one value is greater or less than another of the same type.\n","type_name":"trait"},{"html_filename":"trait.BitwiseAnd.html","module_info":["core","ops"],"name":"BitwiseAnd","preview":"Trait to bitwise AND two values of the same type.\n","type_name":"trait"},{"html_filename":"trait.BitwiseOr.html","module_info":["core","ops"],"name":"BitwiseOr","preview":"Trait to bitwise OR two values of the same type.\n","type_name":"trait"},{"html_filename":"trait.BitwiseXor.html","module_info":["core","ops"],"name":"BitwiseXor","preview":"Trait to bitwise XOR two values of the same type.\n","type_name":"trait"},{"html_filename":"trait.Shift.html","module_info":["core","ops"],"name":"Shift","preview":"Trait to bit shift a value.\n","type_name":"trait"},{"html_filename":"fn.ok_str_eq.html","module_info":["core","ops"],"name":"ok_str_eq","preview":"","type_name":"function"},{"html_filename":"struct.StorageKey.html","module_info":["core","storage"],"name":"StorageKey","preview":"Describes a location in storage.\n","type_name":"struct"},{"html_filename":"struct.Buffer.html","module_info":["core","codec"],"name":"Buffer","preview":"","type_name":"struct"},{"html_filename":"struct.BufferReader.html","module_info":["core","codec"],"name":"BufferReader","preview":"","type_name":"struct"},{"html_filename":"trait.AbiDecode.html","module_info":["core","codec"],"name":"AbiDecode","preview":"","type_name":"trait"},{"html_filename":"trait.AbiEncode.html","module_info":["core","codec"],"name":"AbiEncode","preview":"","type_name":"trait"},{"html_filename":"fn.encode.html","module_info":["core","codec"],"name":"encode","preview":"","type_name":"function"},{"html_filename":"fn.abi_decode.html","module_info":["core","codec"],"name":"abi_decode","preview":"","type_name":"function"},{"html_filename":"fn.contract_call.html","module_info":["core","codec"],"name":"contract_call","preview":"","type_name":"function"},{"html_filename":"fn.decode_script_data.html","module_info":["core","codec"],"name":"decode_script_data","preview":"","type_name":"function"},{"html_filename":"fn.decode_predicate_data.html","module_info":["core","codec"],"name":"decode_predicate_data","preview":"","type_name":"function"},{"html_filename":"fn.decode_predicate_data_by_index.html","module_info":["core","codec"],"name":"decode_predicate_data_by_index","preview":"","type_name":"function"},{"html_filename":"fn.decode_first_param.html","module_info":["core","codec"],"name":"decode_first_param","preview":"","type_name":"function"},{"html_filename":"fn.decode_second_param.html","module_info":["core","codec"],"name":"decode_second_param","preview":"","type_name":"function"}],"standards":[{"html_filename":"abi.SRC3.html","module_info":["standards","src3"],"name":"SRC3","preview":"","type_name":"abi"},{"html_filename":"enum.State.html","module_info":["standards","src5"],"name":"State","preview":"Determines the state of ownership.\n","type_name":"enum"},{"html_filename":"enum.AccessError.html","module_info":["standards","src5"],"name":"AccessError","preview":"Error log for when access is denied.\n","type_name":"enum"},{"html_filename":"abi.SRC5.html","module_info":["standards","src5"],"name":"SRC5","preview":"","type_name":"abi"},{"html_filename":"struct.Deposit.html","module_info":["standards","src6"],"name":"Deposit","preview":"Event logged when a deposit is made.\n","type_name":"struct"},{"html_filename":"struct.Withdraw.html","module_info":["standards","src6"],"name":"Withdraw","preview":"Event logged when a withdrawal is made.\n","type_name":"struct"},{"html_filename":"abi.SRC6.html","module_info":["standards","src6"],"name":"SRC6","preview":"","type_name":"abi"},{"html_filename":"enum.Metadata.html","module_info":["standards","src7"],"name":"Metadata","preview":"Universal return type for metadata.\n","type_name":"enum"},{"html_filename":"abi.SRC7.html","module_info":["standards","src7"],"name":"SRC7","preview":"","type_name":"abi"},{"html_filename":"enum.DepositType.html","module_info":["standards","src10"],"name":"DepositType","preview":"Specifies the type of deposit made.\n","type_name":"enum"},{"html_filename":"struct.MetadataMessage.html","module_info":["standards","src10"],"name":"MetadataMessage","preview":"","type_name":"struct"},{"html_filename":"abi.SRC10.html","module_info":["standards","src10"],"name":"SRC10","preview":"","type_name":"abi"},{"html_filename":"struct.SecurityInformation.html","module_info":["standards","src11"],"name":"SecurityInformation","preview":"Contact Information to report bugs to.\n","type_name":"struct"},{"html_filename":"abi.SRC11.html","module_info":["standards","src11"],"name":"SRC11","preview":"","type_name":"abi"},{"html_filename":"abi.SRC12.html","module_info":["standards","src12"],"name":"SRC12","preview":"","type_name":"abi"},{"html_filename":"abi.SRC12_Extension.html","module_info":["standards","src12"],"name":"SRC12_Extension","preview":"","type_name":"abi"},{"html_filename":"abi.SRC14.html","module_info":["standards","src14"],"name":"SRC14","preview":"","type_name":"abi"},{"html_filename":"constant.SRC14_TARGET_STORAGE.html","module_info":["standards","src14"],"name":"SRC14_TARGET_STORAGE","preview":"The standard storage slot to store proxy target address.\n","type_name":"constant"},{"html_filename":"abi.SRC20.html","module_info":["standards","src20"],"name":"SRC20","preview":"","type_name":"abi"}],"std":[{"html_filename":"constant.ZERO_B256.html","module_info":["std","constants"],"name":"ZERO_B256","preview":"A b256 of zero value.\n","type_name":"constant"},{"html_filename":"constant.ZERO_U256.html","module_info":["std","constants"],"name":"ZERO_U256","preview":"A u256 of zero value.\n","type_name":"constant"},{"html_filename":"constant.DEFAULT_SUB_ID.html","module_info":["std","constants"],"name":"DEFAULT_SUB_ID","preview":"The default Sub Id for assets.\n","type_name":"constant"},{"html_filename":"constant.FAILED_REQUIRE_SIGNAL.html","module_info":["std","error_signals"],"name":"FAILED_REQUIRE_SIGNAL","preview":"A revert with this value signals that it was caused by a failing call to <code>std::revert::require</code>.","type_name":"constant"},{"html_filename":"constant.FAILED_TRANSFER_TO_ADDRESS_SIGNAL.html","module_info":["std","error_signals"],"name":"FAILED_TRANSFER_TO_ADDRESS_SIGNAL","preview":"A revert with this value signals that it was caused by a failing call to <code>std::asset::transfer_to_address</code>.","type_name":"constant"},{"html_filename":"constant.FAILED_ASSERT_EQ_SIGNAL.html","module_info":["std","error_signals"],"name":"FAILED_ASSERT_EQ_SIGNAL","preview":"A revert with this value signals that it was caused by a failing call to <code>std::assert::assert_eq</code>.","type_name":"constant"},{"html_filename":"constant.FAILED_ASSERT_SIGNAL.html","module_info":["std","error_signals"],"name":"FAILED_ASSERT_SIGNAL","preview":"A revert with this value signals that it was caused by a failing call to <code>std::assert::assert</code>.","type_name":"constant"},{"html_filename":"constant.FAILED_ASSERT_NE_SIGNAL.html","module_info":["std","error_signals"],"name":"FAILED_ASSERT_NE_SIGNAL","preview":"A revert with this value signals that it was caused by a failing call to <code>std::assert::assert_ne</code>.","type_name":"constant"},{"html_filename":"fn.log.html","module_info":["std","logging"],"name":"log","preview":"Log any stack type.\n","type_name":"function"},{"html_filename":"fn.revert.html","module_info":["std","revert"],"name":"revert","preview":"Will either panic or revert with a given number depending on the context.\n","type_name":"function"},{"html_filename":"fn.require.html","module_info":["std","revert"],"name":"require","preview":"Checks if the given <code>condition</code> is <code>true</code> and if not, logs <code>value</code> and reverts.","type_name":"function"},{"html_filename":"enum.Result.html","module_info":["std","result"],"name":"Result","preview":"<code>Result</code> is a type that represents either success (<code>Ok</code>) or failure (<code>Err</code>).","type_name":"enum"},{"html_filename":"enum.Option.html","module_info":["std","option"],"name":"Option","preview":"A type that represents an optional value, either <code>Some(val)</code> or <code>None</code>.","type_name":"enum"},{"html_filename":"fn.assert.html","module_info":["std","assert"],"name":"assert","preview":"Asserts that the given <code>condition</code> will always be <code>true</code> during runtime.","type_name":"function"},{"html_filename":"fn.assert_eq.html","module_info":["std","assert"],"name":"assert_eq","preview":"Asserts that the given values <code>v1</code> &amp; <code>v2</code> will always be equal during runtime.","type_name":"function"},{"html_filename":"fn.assert_ne.html","module_info":["std","assert"],"name":"assert_ne","preview":"Asserts that the given values <code>v1</code> &amp; <code>v2</code> will never be equal during runtime.","type_name":"function"},{"html_filename":"trait.From.html","module_info":["std","convert"],"name":"From","preview":"Used to do value-to-value conversions.\n","type_name":"trait"},{"html_filename":"trait.Into.html","module_info":["std","convert"],"name":"Into","preview":"Used to do value-to-value conversions.\n","type_name":"trait"},{"html_filename":"trait.TryFrom.html","module_info":["std","convert"],"name":"TryFrom","preview":"Used to attempt to do value-to-value conversions.<br />","type_name":"trait"},{"html_filename":"trait.TryInto.html","module_info":["std","convert"],"name":"TryInto","preview":"","type_name":"trait"},{"html_filename":"fn.is_reference_type.html","module_info":["std","intrinsics"],"name":"is_reference_type","preview":"Returns whether a generic type <code>T</code> is a reference type or not.\n","type_name":"function"},{"html_filename":"fn.size_of.html","module_info":["std","intrinsics"],"name":"size_of","preview":"Returns the size of a generic type <code>T</code> in bytes.\n","type_name":"function"},{"html_filename":"fn.size_of_val.html","module_info":["std","intrinsics"],"name":"size_of_val","preview":"Returns the size of the type of a value in bytes.\n","type_name":"function"},{"html_filename":"fn.alloc.html","module_info":["std","alloc"],"name":"alloc","preview":"Allocates zeroed memory on the heap.\n","type_name":"function"},{"html_filename":"fn.realloc.html","module_info":["std","alloc"],"name":"realloc","preview":"Reallocates the given area of memory.\n","type_name":"function"},{"html_filename":"fn.alloc_bytes.html","module_info":["std","alloc"],"name":"alloc_bytes","preview":"Allocates zeroed memory on the heap in individual bytes.\n","type_name":"function"},{"html_filename":"fn.realloc_bytes.html","module_info":["std","alloc"],"name":"realloc_bytes","preview":"Reallocates the given area of memory in individual bytes.\n","type_name":"function"},{"html_filename":"fn.overflow.html","module_info":["std","registers"],"name":"overflow","preview":"Contains overflow &amp; underflow of addition, subtraction, and multiplication.\n","type_name":"function"},{"html_filename":"fn.program_counter.html","module_info":["std","registers"],"name":"program_counter","preview":"The program counter. Memory address of the current instruction.\n","type_name":"function"},{"html_filename":"fn.stack_start_ptr.html","module_info":["std","registers"],"name":"stack_start_ptr","preview":"Memory address of bottom of current writable stack area.\n","type_name":"function"},{"html_filename":"fn.stack_ptr.html","module_info":["std","registers"],"name":"stack_ptr","preview":"Memory address on top of current writable stack area (points to free memory).\n","type_name":"function"},{"html_filename":"fn.frame_ptr.html","module_info":["std","registers"],"name":"frame_ptr","preview":"Memory address of beginning of current call frame.\n","type_name":"function"},{"html_filename":"fn.heap_ptr.html","module_info":["std","registers"],"name":"heap_ptr","preview":"Memory address below the current bottom of the heap (points to free memory).\n","type_name":"function"},{"html_filename":"fn.error.html","module_info":["std","registers"],"name":"error","preview":"Error codes for particular operations.\n","type_name":"function"},{"html_filename":"fn.global_gas.html","module_info":["std","registers"],"name":"global_gas","preview":"Remaining gas globally.\n","type_name":"function"},{"html_filename":"fn.context_gas.html","module_info":["std","registers"],"name":"context_gas","preview":"Remaining gas in the context.\n","type_name":"function"},{"html_filename":"fn.balance.html","module_info":["std","registers"],"name":"balance","preview":"Get the amount of units of <code>call_frames::msg_asset_id()</code> being sent.\n","type_name":"function"},{"html_filename":"fn.instrs_start.html","module_info":["std","registers"],"name":"instrs_start","preview":"Pointer to the start of the currently-executing code.\n","type_name":"function"},{"html_filename":"fn.return_value.html","module_info":["std","registers"],"name":"return_value","preview":"Return value or pointer.\n","type_name":"function"},{"html_filename":"fn.return_length.html","module_info":["std","registers"],"name":"return_length","preview":"Return value length in bytes.\n","type_name":"function"},{"html_filename":"fn.flags.html","module_info":["std","registers"],"name":"flags","preview":"Flags register.\n","type_name":"function"},{"html_filename":"trait.Iterator.html","module_info":["std","iterator"],"name":"Iterator","preview":"","type_name":"trait"},{"html_filename":"struct.Vec.html","module_info":["std","vec"],"name":"Vec","preview":"A contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short for ‘vector’.\n","type_name":"struct"},{"html_filename":"struct.VecIter.html","module_info":["std","vec"],"name":"VecIter","preview":"","type_name":"struct"},{"html_filename":"trait.Clone.html","module_info":["std","clone"],"name":"Clone","preview":"A common trait for the ability to explicitly duplicate an object.\n","type_name":"trait"},{"html_filename":"struct.Bytes.html","module_info":["std","bytes"],"name":"Bytes","preview":"A type used to represent raw bytes.\n","type_name":"struct"},{"html_filename":"fn.test_encode_decode.html","module_info":["std","bytes"],"name":"test_encode_decode","preview":"","type_name":"function"},{"html_filename":"trait.Root.html","module_info":["std","math"],"name":"Root","preview":"Calculates the square root.\n","type_name":"trait"},{"html_filename":"trait.Power.html","module_info":["std","math"],"name":"Power","preview":"Calculates a number to a given power.\n","type_name":"trait"},{"html_filename":"trait.Exponent.html","module_info":["std","math"],"name":"Exponent","preview":"Trait for exponential functions.<br />","type_name":"trait"},{"html_filename":"trait.Logarithm.html","module_info":["std","math"],"name":"Logarithm","preview":"Calculates the log with a given base.\n","type_name":"trait"},{"html_filename":"trait.BinaryLogarithm.html","module_info":["std","math"],"name":"BinaryLogarithm","preview":"Calculates the binary log.\n","type_name":"trait"},{"html_filename":"fn.set_flags.html","module_info":["std","flags"],"name":"set_flags","preview":"Sets the flag register to the given value.\n","type_name":"function"},{"html_filename":"fn.disable_panic_on_overflow.html","module_info":["std","flags"],"name":"disable_panic_on_overflow","preview":"Allows overflowing operations to occur without a FuelVM panic.\n","type_name":"function"},{"html_filename":"fn.enable_panic_on_overflow.html","module_info":["std","flags"],"name":"enable_panic_on_overflow","preview":"Enables the default <code>panic-on-overflow</code> behavior in the FuelVM.\n","type_name":"function"},{"html_filename":"fn.disable_panic_on_unsafe_math.html","module_info":["std","flags"],"name":"disable_panic_on_unsafe_math","preview":"Allows unsafe math operations to occur without a FuelVM panic.<br />","type_name":"function"},{"html_filename":"fn.enable_panic_on_unsafe_math.html","module_info":["std","flags"],"name":"enable_panic_on_unsafe_math","preview":"Enables the default <code>panic-on-unsafe-math</code> behavior in the FuelVM.\n","type_name":"function"},{"html_filename":"struct.U128.html","module_info":["std","u128"],"name":"U128","preview":"The 128-bit unsigned integer type.\n","type_name":"struct"},{"html_filename":"enum.U128Error.html","module_info":["std","u128"],"name":"U128Error","preview":"The error type used for <code>U128</code> type errors.\n","type_name":"enum"},{"html_filename":"struct.B512.html","module_info":["std","b512"],"name":"B512","preview":"Stores two <code>b256</code>s in contiguous memory.<br />","type_name":"struct"},{"html_filename":"struct.Hasher.html","module_info":["std","hash"],"name":"Hasher","preview":"","type_name":"struct"},{"html_filename":"trait.Hash.html","module_info":["std","hash"],"name":"Hash","preview":"","type_name":"trait"},{"html_filename":"fn.sha256.html","module_info":["std","hash"],"name":"sha256","preview":"Returns the <code>SHA-2-256</code> hash of <code>param</code>.\n","type_name":"function"},{"html_filename":"fn.sha256_str_array.html","module_info":["std","hash"],"name":"sha256_str_array","preview":"Returns the <code>SHA-2-256</code> hash of <code>param</code>.<br />","type_name":"function"},{"html_filename":"fn.keccak256.html","module_info":["std","hash"],"name":"keccak256","preview":"Returns the <code>KECCAK-256</code> hash of <code>param</code>.\n","type_name":"function"},{"html_filename":"struct.ContractId.html","module_info":["std","contract_id"],"name":"ContractId","preview":"The <code>ContractId</code> type, a struct wrapper around the inner <code>b256</code> value.\n","type_name":"struct"},{"html_filename":"struct.AssetId.html","module_info":["std","asset_id"],"name":"AssetId","preview":"An AssetId is used for interacting with an asset on the network.\n","type_name":"struct"},{"html_filename":"fn.run_external.html","module_info":["std","execution"],"name":"run_external","preview":"Load and run the contract with the provided <code>ContractId</code>.\n","type_name":"function"},{"html_filename":"fn.msg_asset_id.html","module_info":["std","call_frames"],"name":"msg_asset_id","preview":"Get the <code>asset_id</code> of coins being sent from the current call frame.\n","type_name":"function"},{"html_filename":"fn.code_size.html","module_info":["std","call_frames"],"name":"code_size","preview":"Get the code size in bytes (padded to word alignment) from the current call frame.\n","type_name":"function"},{"html_filename":"fn.first_param.html","module_info":["std","call_frames"],"name":"first_param","preview":"Get the first parameter from the current call frame.\n","type_name":"function"},{"html_filename":"fn.second_param.html","module_info":["std","call_frames"],"name":"second_param","preview":"Get the second parameter from the current call frame.\n","type_name":"function"},{"html_filename":"fn.called_method.html","module_info":["std","call_frames"],"name":"called_method","preview":"Get the called method name from the current call frame.\n","type_name":"function"},{"html_filename":"fn.called_args.html","module_info":["std","call_frames"],"name":"called_args","preview":"Get the called arguments from the current call frame.\n","type_name":"function"},{"html_filename":"fn.get_previous_frame_pointer.html","module_info":["std","call_frames"],"name":"get_previous_frame_pointer","preview":"Get a pointer to the previous (relative to the <code>frame_pointer</code> parameter) call frame using offsets from a pointer.","type_name":"function"},{"html_filename":"fn.get_contract_id_from_call_frame.html","module_info":["std","call_frames"],"name":"get_contract_id_from_call_frame","preview":"Get the value of <code>ContractId</code> from any call frame on the stack.\n","type_name":"function"},{"html_filename":"fn.balance_of.html","module_info":["std","context"],"name":"balance_of","preview":"Get the balance of coin <code>asset_id</code> for the contract at ‘target’.\n","type_name":"function"},{"html_filename":"fn.this_balance.html","module_info":["std","context"],"name":"this_balance","preview":"Get the balance of coin <code>asset_id</code> for the current contract.\n","type_name":"function"},{"html_filename":"fn.msg_amount.html","module_info":["std","context"],"name":"msg_amount","preview":"Get the amount of units of <code>call_frames::msg_asset_id()</code> being sent.\n","type_name":"function"},{"html_filename":"fn.bytecode_root.html","module_info":["std","external"],"name":"bytecode_root","preview":"Get the root of the bytecode of the contract at ‘contract_id’.\n","type_name":"function"},{"html_filename":"constant.GTF_TYPE.html","module_info":["std","tx"],"name":"GTF_TYPE","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_SCRIPT_GAS_LIMIT.html","module_info":["std","tx"],"name":"GTF_SCRIPT_GAS_LIMIT","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_SCRIPT_SCRIPT_LENGTH.html","module_info":["std","tx"],"name":"GTF_SCRIPT_SCRIPT_LENGTH","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_SCRIPT_SCRIPT_DATA_LENGTH.html","module_info":["std","tx"],"name":"GTF_SCRIPT_SCRIPT_DATA_LENGTH","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_SCRIPT_INPUTS_COUNT.html","module_info":["std","tx"],"name":"GTF_SCRIPT_INPUTS_COUNT","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_SCRIPT_OUTPUTS_COUNT.html","module_info":["std","tx"],"name":"GTF_SCRIPT_OUTPUTS_COUNT","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_SCRIPT_WITNESSES_COUNT.html","module_info":["std","tx"],"name":"GTF_SCRIPT_WITNESSES_COUNT","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_SCRIPT_SCRIPT.html","module_info":["std","tx"],"name":"GTF_SCRIPT_SCRIPT","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_SCRIPT_SCRIPT_DATA.html","module_info":["std","tx"],"name":"GTF_SCRIPT_SCRIPT_DATA","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_SCRIPT_INPUT_AT_INDEX.html","module_info":["std","tx"],"name":"GTF_SCRIPT_INPUT_AT_INDEX","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_SCRIPT_OUTPUT_AT_INDEX.html","module_info":["std","tx"],"name":"GTF_SCRIPT_OUTPUT_AT_INDEX","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_SCRIPT_WITNESS_AT_INDEX.html","module_info":["std","tx"],"name":"GTF_SCRIPT_WITNESS_AT_INDEX","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_TX_LENGTH.html","module_info":["std","tx"],"name":"GTF_TX_LENGTH","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_CREATE_INPUTS_COUNT.html","module_info":["std","tx"],"name":"GTF_CREATE_INPUTS_COUNT","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_CREATE_OUTPUTS_COUNT.html","module_info":["std","tx"],"name":"GTF_CREATE_OUTPUTS_COUNT","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_CREATE_WITNESSES_COUNT.html","module_info":["std","tx"],"name":"GTF_CREATE_WITNESSES_COUNT","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_CREATE_INPUT_AT_INDEX.html","module_info":["std","tx"],"name":"GTF_CREATE_INPUT_AT_INDEX","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_CREATE_OUTPUT_AT_INDEX.html","module_info":["std","tx"],"name":"GTF_CREATE_OUTPUT_AT_INDEX","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_CREATE_WITNESS_AT_INDEX.html","module_info":["std","tx"],"name":"GTF_CREATE_WITNESS_AT_INDEX","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_WITNESS_DATA_LENGTH.html","module_info":["std","tx"],"name":"GTF_WITNESS_DATA_LENGTH","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_WITNESS_DATA.html","module_info":["std","tx"],"name":"GTF_WITNESS_DATA","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_POLICY_TYPES.html","module_info":["std","tx"],"name":"GTF_POLICY_TYPES","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_POLICY_TIP.html","module_info":["std","tx"],"name":"GTF_POLICY_TIP","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_POLICY_WITNESS_LIMIT.html","module_info":["std","tx"],"name":"GTF_POLICY_WITNESS_LIMIT","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_POLICY_MATURITY.html","module_info":["std","tx"],"name":"GTF_POLICY_MATURITY","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_POLICY_MAX_FEE.html","module_info":["std","tx"],"name":"GTF_POLICY_MAX_FEE","preview":"","type_name":"constant"},{"html_filename":"enum.Transaction.html","module_info":["std","tx"],"name":"Transaction","preview":"A transaction type.\n","type_name":"enum"},{"html_filename":"fn.tx_type.html","module_info":["std","tx"],"name":"tx_type","preview":"Get the type of the current transaction.<br />","type_name":"function"},{"html_filename":"fn.tx_tip.html","module_info":["std","tx"],"name":"tx_tip","preview":"Get the tip for the transaction, if it is set.\n","type_name":"function"},{"html_filename":"fn.script_gas_limit.html","module_info":["std","tx"],"name":"script_gas_limit","preview":"Get the script gas limit for the transaction.\n","type_name":"function"},{"html_filename":"fn.tx_maturity.html","module_info":["std","tx"],"name":"tx_maturity","preview":"Get the maturity for the transaction, if it is set.\n","type_name":"function"},{"html_filename":"fn.tx_witness_limit.html","module_info":["std","tx"],"name":"tx_witness_limit","preview":"Get the witness limit for the transaction, if it is set.\n","type_name":"function"},{"html_filename":"fn.tx_max_fee.html","module_info":["std","tx"],"name":"tx_max_fee","preview":"Get the max fee for the transaction, if it is set.\n","type_name":"function"},{"html_filename":"fn.tx_script_length.html","module_info":["std","tx"],"name":"tx_script_length","preview":"Get the length of the script for the transaction.\n","type_name":"function"},{"html_filename":"fn.tx_script_data_length.html","module_info":["std","tx"],"name":"tx_script_data_length","preview":"Get the script data length for the transaction.\n","type_name":"function"},{"html_filename":"fn.tx_witnesses_count.html","module_info":["std","tx"],"name":"tx_witnesses_count","preview":"Get the transaction witnesses count for the transaction.\n","type_name":"function"},{"html_filename":"fn.tx_witness_pointer.html","module_info":["std","tx"],"name":"tx_witness_pointer","preview":"Get a pointer to the witness at index <code>index</code> for the transaction.\n","type_name":"function"},{"html_filename":"fn.tx_witness_data_length.html","module_info":["std","tx"],"name":"tx_witness_data_length","preview":"Get the length of the witness data at <code>index</code>.\n","type_name":"function"},{"html_filename":"fn.tx_witness_data.html","module_info":["std","tx"],"name":"tx_witness_data","preview":"Get the witness data at <code>index</code>.\n","type_name":"function"},{"html_filename":"fn.tx_script_start_pointer.html","module_info":["std","tx"],"name":"tx_script_start_pointer","preview":"Get the transaction script start pointer.\n","type_name":"function"},{"html_filename":"fn.tx_script_data_start_pointer.html","module_info":["std","tx"],"name":"tx_script_data_start_pointer","preview":"Get the transaction script data start pointer.\n","type_name":"function"},{"html_filename":"fn.tx_script_data.html","module_info":["std","tx"],"name":"tx_script_data","preview":"Get the script data, typed.\n","type_name":"function"},{"html_filename":"fn.tx_script_bytecode.html","module_info":["std","tx"],"name":"tx_script_bytecode","preview":"Get the script bytecode.\n","type_name":"function"},{"html_filename":"fn.tx_script_bytecode_hash.html","module_info":["std","tx"],"name":"tx_script_bytecode_hash","preview":"Get the hash of the script bytecode.<br />\nReverts if not a transaction-script.\n","type_name":"function"},{"html_filename":"fn.tx_id.html","module_info":["std","tx"],"name":"tx_id","preview":"Get the Transaction ID of the current transaction.\n","type_name":"function"},{"html_filename":"struct.Address.html","module_info":["std","address"],"name":"Address","preview":"The <code>Address</code> type, a struct wrapper around the inner <code>b256</code> value.\n","type_name":"struct"},{"html_filename":"constant.GTF_OUTPUT_TYPE.html","module_info":["std","outputs"],"name":"GTF_OUTPUT_TYPE","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_OUTPUT_COIN_TO.html","module_info":["std","outputs"],"name":"GTF_OUTPUT_COIN_TO","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_OUTPUT_COIN_AMOUNT.html","module_info":["std","outputs"],"name":"GTF_OUTPUT_COIN_AMOUNT","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_OUTPUT_COIN_ASSET_ID.html","module_info":["std","outputs"],"name":"GTF_OUTPUT_COIN_ASSET_ID","preview":"","type_name":"constant"},{"html_filename":"enum.Output.html","module_info":["std","outputs"],"name":"Output","preview":"The output type for a transaction.\n","type_name":"enum"},{"html_filename":"fn.output_type.html","module_info":["std","outputs"],"name":"output_type","preview":"Get the type of an output at <code>index</code>.\n","type_name":"function"},{"html_filename":"fn.output_pointer.html","module_info":["std","outputs"],"name":"output_pointer","preview":"Get a pointer to the output at <code>index</code><br />","type_name":"function"},{"html_filename":"fn.output_count.html","module_info":["std","outputs"],"name":"output_count","preview":"Get the transaction outputs count for either <code>tx_type</code><br />","type_name":"function"},{"html_filename":"fn.output_amount.html","module_info":["std","outputs"],"name":"output_amount","preview":"The amount of coins to send to the output at <code>index</code>.\n","type_name":"function"},{"html_filename":"fn.output_asset_id.html","module_info":["std","outputs"],"name":"output_asset_id","preview":"Gets the AssetId of the output if it is a <code>Output::Coin</code>.\n","type_name":"function"},{"html_filename":"fn.output_asset_to.html","module_info":["std","outputs"],"name":"output_asset_to","preview":"Returns the receiver of the output if it is a <code>Output::Coin</code>.\n","type_name":"function"},{"html_filename":"enum.Identity.html","module_info":["std","identity"],"name":"Identity","preview":"The <code>Identity</code> type: either an <code>Address</code> or a <code>ContractId</code>.\n","type_name":"enum"},{"html_filename":"enum.EcRecoverError.html","module_info":["std","ecr"],"name":"EcRecoverError","preview":"The error type used when the <code>ec_recover</code> function fails.\n","type_name":"enum"},{"html_filename":"fn.ec_recover.html","module_info":["std","ecr"],"name":"ec_recover","preview":"Recover the public key derived from the private key used to sign a message.<br />","type_name":"function"},{"html_filename":"fn.ec_recover_r1.html","module_info":["std","ecr"],"name":"ec_recover_r1","preview":"Recover the public key derived from the private key used to sign a message.<br />","type_name":"function"},{"html_filename":"fn.ed_verify.html","module_info":["std","ecr"],"name":"ed_verify","preview":"Verifies that a public key derived from the private key was used to sign a message.<br />","type_name":"function"},{"html_filename":"fn.ec_recover_address.html","module_info":["std","ecr"],"name":"ec_recover_address","preview":"Recover the address derived from the private key used to sign a message.<br />","type_name":"function"},{"html_filename":"fn.ec_recover_address_r1.html","module_info":["std","ecr"],"name":"ec_recover_address_r1","preview":"Recover the address derived from the private key used to sign a message.<br />","type_name":"function"},{"html_filename":"struct.EvmAddress.html","module_info":["std","vm","evm","evm_address"],"name":"EvmAddress","preview":"The <code>EvmAddress</code> type, a struct wrapper around the inner <code>b256</code> value.\n","type_name":"struct"},{"html_filename":"fn.ec_recover_evm_address.html","module_info":["std","vm","evm","ecr"],"name":"ec_recover_evm_address","preview":"Recover the EVM address derived from the private key used to sign a message.<br />","type_name":"function"},{"html_filename":"struct.String.html","module_info":["std","string"],"name":"String","preview":"A UTF-8 encoded growable string.\n","type_name":"struct"},{"html_filename":"fn.write.html","module_info":["std","storage","storage_api"],"name":"write","preview":"Stores a stack value in storage. Will not work for heap values.\n","type_name":"function"},{"html_filename":"fn.read.html","module_info":["std","storage","storage_api"],"name":"read","preview":"Reads a value of type <code>T</code> starting at the location specified by <code>slot</code> and <code>offset</code>. If the<br />","type_name":"function"},{"html_filename":"fn.clear.html","module_info":["std","storage","storage_api"],"name":"clear","preview":"Clear a value starting at some slot with an offset.\n","type_name":"function"},{"html_filename":"fn.write_slice.html","module_info":["std","storage","storable_slice"],"name":"write_slice","preview":"Store a raw_slice from the heap into storage.\n","type_name":"function"},{"html_filename":"fn.read_slice.html","module_info":["std","storage","storable_slice"],"name":"read_slice","preview":"Load a raw_slice from storage.\n","type_name":"function"},{"html_filename":"fn.clear_slice.html","module_info":["std","storage","storable_slice"],"name":"clear_slice","preview":"Clear a sequence of storage slots starting at a some key.\n","type_name":"function"},{"html_filename":"trait.StorableSlice.html","module_info":["std","storage","storable_slice"],"name":"StorableSlice","preview":"A general way to persistently store heap types.\n","type_name":"trait"},{"html_filename":"enum.StorageMapError.html","module_info":["std","storage","storage_map"],"name":"StorageMapError","preview":"Errors pertaining to the <code>StorageMap</code> struct.\n","type_name":"enum"},{"html_filename":"struct.StorageMap.html","module_info":["std","storage","storage_map"],"name":"StorageMap","preview":"A persistent key-value pair mapping struct.\n","type_name":"struct"},{"html_filename":"struct.StorageVec.html","module_info":["std","storage","storage_vec"],"name":"StorageVec","preview":"A persistent vector struct.\n","type_name":"struct"},{"html_filename":"struct.StorageBytes.html","module_info":["std","storage","storage_bytes"],"name":"StorageBytes","preview":"A persistent storage type to store a collection of tightly packed bytes.\n","type_name":"struct"},{"html_filename":"struct.StorageString.html","module_info":["std","storage","storage_string"],"name":"StorageString","preview":"","type_name":"struct"},{"html_filename":"fn.height.html","module_info":["std","block"],"name":"height","preview":"Get the current block height.\n","type_name":"function"},{"html_filename":"fn.timestamp_of_block.html","module_info":["std","block"],"name":"timestamp_of_block","preview":"Get the TAI64 timestamp of a block at a given <code>block_height</code>.\n","type_name":"function"},{"html_filename":"fn.timestamp.html","module_info":["std","block"],"name":"timestamp","preview":"Get the TAI64 timestamp of the current block.\n","type_name":"function"},{"html_filename":"fn.block_header_hash.html","module_info":["std","block"],"name":"block_header_hash","preview":"Get the header hash of the block at height <code>block_height</code>\n","type_name":"function"},{"html_filename":"constant.GTF_INPUT_COIN_OWNER.html","module_info":["std","inputs"],"name":"GTF_INPUT_COIN_OWNER","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_INPUT_COIN_AMOUNT.html","module_info":["std","inputs"],"name":"GTF_INPUT_COIN_AMOUNT","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_INPUT_COIN_ASSET_ID.html","module_info":["std","inputs"],"name":"GTF_INPUT_COIN_ASSET_ID","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_INPUT_COIN_WITNESS_INDEX.html","module_info":["std","inputs"],"name":"GTF_INPUT_COIN_WITNESS_INDEX","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_INPUT_COIN_PREDICATE_LENGTH.html","module_info":["std","inputs"],"name":"GTF_INPUT_COIN_PREDICATE_LENGTH","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_INPUT_COIN_PREDICATE_DATA_LENGTH.html","module_info":["std","inputs"],"name":"GTF_INPUT_COIN_PREDICATE_DATA_LENGTH","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_INPUT_COIN_PREDICATE.html","module_info":["std","inputs"],"name":"GTF_INPUT_COIN_PREDICATE","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_INPUT_COIN_PREDICATE_DATA.html","module_info":["std","inputs"],"name":"GTF_INPUT_COIN_PREDICATE_DATA","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_INPUT_MESSAGE_SENDER.html","module_info":["std","inputs"],"name":"GTF_INPUT_MESSAGE_SENDER","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_INPUT_MESSAGE_RECIPIENT.html","module_info":["std","inputs"],"name":"GTF_INPUT_MESSAGE_RECIPIENT","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_INPUT_MESSAGE_AMOUNT.html","module_info":["std","inputs"],"name":"GTF_INPUT_MESSAGE_AMOUNT","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_INPUT_MESSAGE_NONCE.html","module_info":["std","inputs"],"name":"GTF_INPUT_MESSAGE_NONCE","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_INPUT_MESSAGE_WITNESS_INDEX.html","module_info":["std","inputs"],"name":"GTF_INPUT_MESSAGE_WITNESS_INDEX","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_INPUT_MESSAGE_DATA_LENGTH.html","module_info":["std","inputs"],"name":"GTF_INPUT_MESSAGE_DATA_LENGTH","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_INPUT_MESSAGE_PREDICATE_LENGTH.html","module_info":["std","inputs"],"name":"GTF_INPUT_MESSAGE_PREDICATE_LENGTH","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_INPUT_MESSAGE_PREDICATE_DATA_LENGTH.html","module_info":["std","inputs"],"name":"GTF_INPUT_MESSAGE_PREDICATE_DATA_LENGTH","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_INPUT_MESSAGE_DATA.html","module_info":["std","inputs"],"name":"GTF_INPUT_MESSAGE_DATA","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_INPUT_MESSAGE_PREDICATE.html","module_info":["std","inputs"],"name":"GTF_INPUT_MESSAGE_PREDICATE","preview":"","type_name":"constant"},{"html_filename":"constant.GTF_INPUT_MESSAGE_PREDICATE_DATA.html","module_info":["std","inputs"],"name":"GTF_INPUT_MESSAGE_PREDICATE_DATA","preview":"","type_name":"constant"},{"html_filename":"enum.Input.html","module_info":["std","inputs"],"name":"Input","preview":"The input type for a transaction.\n","type_name":"enum"},{"html_filename":"fn.input_type.html","module_info":["std","inputs"],"name":"input_type","preview":"Gets the type of the input at <code>index</code>.\n","type_name":"function"},{"html_filename":"fn.input_count.html","module_info":["std","inputs"],"name":"input_count","preview":"Gets the transaction inputs count.\n","type_name":"function"},{"html_filename":"fn.input_pointer.html","module_info":["std","inputs"],"name":"input_pointer","preview":"Gets the pointer of the input at <code>index</code>.\n","type_name":"function"},{"html_filename":"fn.input_amount.html","module_info":["std","inputs"],"name":"input_amount","preview":"Gets amount field from input at <code>index</code>.\n","type_name":"function"},{"html_filename":"fn.input_coin_owner.html","module_info":["std","inputs"],"name":"input_coin_owner","preview":"Gets owner field from input at <code>index</code> if it’s a coin.\n","type_name":"function"},{"html_filename":"fn.input_predicate_data_pointer.html","module_info":["std","inputs"],"name":"input_predicate_data_pointer","preview":"Gets the predicate data pointer from the input at <code>index</code>.\n","type_name":"function"},{"html_filename":"fn.input_predicate_data.html","module_info":["std","inputs"],"name":"input_predicate_data","preview":"Gets the predicate data from the input at <code>index</code>.\n","type_name":"function"},{"html_filename":"fn.input_asset_id.html","module_info":["std","inputs"],"name":"input_asset_id","preview":"Gets the AssetId of the input at <code>index</code>.\n","type_name":"function"},{"html_filename":"fn.input_witness_index.html","module_info":["std","inputs"],"name":"input_witness_index","preview":"Gets the witness index from the input at <code>index</code>.\n","type_name":"function"},{"html_filename":"fn.input_predicate_length.html","module_info":["std","inputs"],"name":"input_predicate_length","preview":"Gets the predicate length from the input at <code>index</code>.\n","type_name":"function"},{"html_filename":"fn.input_predicate_pointer.html","module_info":["std","inputs"],"name":"input_predicate_pointer","preview":"Gets the predicate pointer from the input at <code>index</code>.\n","type_name":"function"},{"html_filename":"fn.input_predicate.html","module_info":["std","inputs"],"name":"input_predicate","preview":"Gets the predicate from the input at <code>index</code>.\n","type_name":"function"},{"html_filename":"fn.input_predicate_data_length.html","module_info":["std","inputs"],"name":"input_predicate_data_length","preview":"Gets the predicate data length from the input at <code>index</code>.\n","type_name":"function"},{"html_filename":"fn.input_message_sender.html","module_info":["std","inputs"],"name":"input_message_sender","preview":"Gets the sender of the input message at <code>index</code>.\n","type_name":"function"},{"html_filename":"fn.input_message_recipient.html","module_info":["std","inputs"],"name":"input_message_recipient","preview":"Gets the recipient of the input message at <code>index</code>.\n","type_name":"function"},{"html_filename":"fn.input_message_nonce.html","module_info":["std","inputs"],"name":"input_message_nonce","preview":"Gets the nonce of input message at <code>index</code>.\n","type_name":"function"},{"html_filename":"fn.input_message_data_length.html","module_info":["std","inputs"],"name":"input_message_data_length","preview":"Gets the length of the input message at <code>index</code>.\n","type_name":"function"},{"html_filename":"fn.input_message_data.html","module_info":["std","inputs"],"name":"input_message_data","preview":"Gets the data of the input message at <code>index</code>.\n","type_name":"function"},{"html_filename":"enum.AuthError.html","module_info":["std","auth"],"name":"AuthError","preview":"The error type used when an <code>Identity</code> cannot be determined.\n","type_name":"enum"},{"html_filename":"fn.caller_is_external.html","module_info":["std","auth"],"name":"caller_is_external","preview":"Returns <code>true</code> if the caller is external (i.e. a <code>script</code>).<br />","type_name":"function"},{"html_filename":"fn.caller_contract_id.html","module_info":["std","auth"],"name":"caller_contract_id","preview":"If the caller is internal, returns the contract ID of the caller.\n","type_name":"function"},{"html_filename":"fn.caller_address.html","module_info":["std","auth"],"name":"caller_address","preview":"Get the owner of the inputs (of type <code>Input::Coin</code> or <code>Input::Message</code>) to a<br />","type_name":"function"},{"html_filename":"fn.msg_sender.html","module_info":["std","auth"],"name":"msg_sender","preview":"Get the <code>Identity</code> (i.e. <code>Address</code> or <code>ContractId</code>) from which a call was made.<br />","type_name":"function"},{"html_filename":"fn.predicate_address.html","module_info":["std","auth"],"name":"predicate_address","preview":"Get the current predicate’s address when called in an internal context.\n","type_name":"function"},{"html_filename":"fn.mint.html","module_info":["std","asset"],"name":"mint","preview":"Mint <code>amount</code> coins of the current contract’s <code>sub_id</code>. The newly minted assets are owned by the current contract.","type_name":"function"},{"html_filename":"fn.transfer.html","module_info":["std","asset"],"name":"transfer","preview":"Transfer <code>amount</code> coins of the type <code>asset_id</code> and send them to <code>to</code>.","type_name":"function"},{"html_filename":"fn.mint_to.html","module_info":["std","asset"],"name":"mint_to","preview":"Mint <code>amount</code> coins of the current contract’s <code>asset_id</code> and transfer them to <code>to</code> by calling <code>transfer()</code>.","type_name":"function"},{"html_filename":"fn.burn.html","module_info":["std","asset"],"name":"burn","preview":"Burn <code>amount</code> coins of the current contract’s <code>sub_id</code>. This function burns them from the balance of the current contract.","type_name":"function"},{"html_filename":"fn.send_message.html","module_info":["std","message"],"name":"send_message","preview":"Sends a message <code>msg_data</code> to <code>recipient</code> with a <code>coins</code> amount of the base asset.","type_name":"function"},{"html_filename":"fn.send_typed_message.html","module_info":["std","message"],"name":"send_typed_message","preview":"Sends a message <code>msg_data</code> of type <code>T</code> to <code>recipient</code> with a <code>coins</code> amount of the base asset.","type_name":"function"},{"html_filename":"struct.CallParams.html","module_info":["std","low_level_call"],"name":"CallParams","preview":"A struct representing the call parameters of a function call.\n","type_name":"struct"},{"html_filename":"fn.call_with_function_selector.html","module_info":["std","low_level_call"],"name":"call_with_function_selector","preview":"Call a target contract with a function selector and calldata, provided as <code>Bytes</code>.","type_name":"function"}],"sway_libs":[{"html_filename":"enum.BurnError.html","module_info":["sway_libs","asset","errors"],"name":"BurnError","preview":"Error log for when something goes wrong when burning assets.\n","type_name":"enum"},{"html_filename":"fn._total_assets.html","module_info":["sway_libs","asset","base"],"name":"_total_assets","preview":"Returns the total number of individual assets for a contract.\n","type_name":"function"},{"html_filename":"fn._total_supply.html","module_info":["sway_libs","asset","base"],"name":"_total_supply","preview":"Returns the total supply of coins for an asset.\n","type_name":"function"},{"html_filename":"fn._name.html","module_info":["sway_libs","asset","base"],"name":"_name","preview":"Returns the name of the asset, such as “Ether”.\n","type_name":"function"},{"html_filename":"fn._symbol.html","module_info":["sway_libs","asset","base"],"name":"_symbol","preview":"Returns the symbol of the asset, such as “ETH”.\n","type_name":"function"},{"html_filename":"fn._decimals.html","module_info":["sway_libs","asset","base"],"name":"_decimals","preview":"Returns the number of decimals the asset uses.\n","type_name":"function"},{"html_filename":"fn._set_name.html","module_info":["sway_libs","asset","base"],"name":"_set_name","preview":"Unconditionally sets the name of an asset.\n","type_name":"function"},{"html_filename":"fn._set_symbol.html","module_info":["sway_libs","asset","base"],"name":"_set_symbol","preview":"Unconditionally sets the symbol of an asset.\n","type_name":"function"},{"html_filename":"fn._set_decimals.html","module_info":["sway_libs","asset","base"],"name":"_set_decimals","preview":"Unconditionally sets the decimals of an asset.\n","type_name":"function"},{"html_filename":"abi.SetAssetAttributes.html","module_info":["sway_libs","asset","base"],"name":"SetAssetAttributes","preview":"","type_name":"abi"},{"html_filename":"struct.SetMetadataEvent.html","module_info":["sway_libs","asset","metadata"],"name":"SetMetadataEvent","preview":"The event emitted when metadata is set via the <code>_set_metadata()</code> function.\n","type_name":"struct"},{"html_filename":"struct.StorageMetadata.html","module_info":["sway_libs","asset","metadata"],"name":"StorageMetadata","preview":"A persistent storage type to store the SRC-7; Metadata Standard type.\n","type_name":"struct"},{"html_filename":"fn._set_metadata.html","module_info":["sway_libs","asset","metadata"],"name":"_set_metadata","preview":"Unconditionally stores metadata for a specific asset and key pair.\n","type_name":"function"},{"html_filename":"abi.SetAssetMetadata.html","module_info":["sway_libs","asset","metadata"],"name":"SetAssetMetadata","preview":"","type_name":"abi"},{"html_filename":"fn._mint.html","module_info":["sway_libs","asset","supply"],"name":"_mint","preview":"Unconditionally mints new assets using the <code>sub_id</code> sub-identifier.\n","type_name":"function"},{"html_filename":"fn._burn.html","module_info":["sway_libs","asset","supply"],"name":"_burn","preview":"Burns assets with the given <code>sub_id</code>.\n","type_name":"function"},{"html_filename":"fn.compute_bytecode_root.html","module_info":["sway_libs","bytecode"],"name":"compute_bytecode_root","preview":"Takes the bytecode of a contract or predicate and computes the bytecode root.\n","type_name":"function"},{"html_filename":"fn.compute_bytecode_root_with_configurables.html","module_info":["sway_libs","bytecode"],"name":"compute_bytecode_root_with_configurables","preview":"Takes the bytecode of a contract or predicate and configurables and computes the bytecode root.","type_name":"function"},{"html_filename":"fn.compute_predicate_address.html","module_info":["sway_libs","bytecode"],"name":"compute_predicate_address","preview":"Takes the bytecode of a predicate and computes the address of a predicate.\n","type_name":"function"},{"html_filename":"fn.compute_predicate_address_with_configurables.html","module_info":["sway_libs","bytecode"],"name":"compute_predicate_address_with_configurables","preview":"Takes the bytecode of a predicate and configurables and computes the address of a predicate.\n","type_name":"function"},{"html_filename":"fn.predicate_address_from_root.html","module_info":["sway_libs","bytecode"],"name":"predicate_address_from_root","preview":"Takes the bytecode root of a predicate and generates the address of the predicate.\n","type_name":"function"},{"html_filename":"fn.swap_configurables.html","module_info":["sway_libs","bytecode"],"name":"swap_configurables","preview":"Swaps out configurable values in a contract or predicate’s bytecode.\n","type_name":"function"},{"html_filename":"fn.verify_contract_bytecode.html","module_info":["sway_libs","bytecode"],"name":"verify_contract_bytecode","preview":"Asserts that a contract’s bytecode and the given bytecode match.\n","type_name":"function"},{"html_filename":"fn.verify_contract_bytecode_with_configurables.html","module_info":["sway_libs","bytecode"],"name":"verify_contract_bytecode_with_configurables","preview":"Asserts that a contract’s bytecode and the given bytecode and configurable values match.\n","type_name":"function"},{"html_filename":"fn.verify_predicate_address.html","module_info":["sway_libs","bytecode"],"name":"verify_predicate_address","preview":"Asserts that a predicates’s address from some bytecode and the given address match.\n","type_name":"function"},{"html_filename":"fn.verify_predicate_address_with_configurables.html","module_info":["sway_libs","bytecode"],"name":"verify_predicate_address_with_configurables","preview":"Asserts that a predicates’s address from some bytecode and configurables and the given address match.","type_name":"function"},{"html_filename":"fn._predicate_address_from_root.html","module_info":["sway_libs","bytecode","utils"],"name":"_predicate_address_from_root","preview":"Takes the bytecode root of predicate generates the address of a predicate.\n","type_name":"function"},{"html_filename":"fn._compute_bytecode_root.html","module_info":["sway_libs","bytecode","utils"],"name":"_compute_bytecode_root","preview":"Takes some bytecode and computes the bytecode root.\n","type_name":"function"},{"html_filename":"fn._swap_configurables.html","module_info":["sway_libs","bytecode","utils"],"name":"_swap_configurables","preview":"Swaps out configurable values in a contract’s or predicate’s bytecode.\n","type_name":"function"},{"html_filename":"struct.UFP32.html","module_info":["sway_libs","fixed_point","ufp32"],"name":"UFP32","preview":"The 32-bit unsigned fixed point number type.\n","type_name":"struct"},{"html_filename":"struct.UFP64.html","module_info":["sway_libs","fixed_point","ufp64"],"name":"UFP64","preview":"The 64-bit unsigned fixed point number type.\n","type_name":"struct"},{"html_filename":"struct.UFP128.html","module_info":["sway_libs","fixed_point","ufp128"],"name":"UFP128","preview":"The 128-bit unsigned fixed point number type.\n","type_name":"struct"},{"html_filename":"struct.IFP64.html","module_info":["sway_libs","fixed_point","ifp64"],"name":"IFP64","preview":"The 64-bit signed fixed point number type.\n","type_name":"struct"},{"html_filename":"struct.IFP128.html","module_info":["sway_libs","fixed_point","ifp128"],"name":"IFP128","preview":"The 128-bit signed fixed point number type.\n","type_name":"struct"},{"html_filename":"struct.IFP256.html","module_info":["sway_libs","fixed_point","ifp256"],"name":"IFP256","preview":"The 256-bit signed fixed point number type.\n","type_name":"struct"},{"html_filename":"fn.starting_bit.html","module_info":["sway_libs","merkle","utils"],"name":"starting_bit","preview":"Calculates the starting bit of the path to a leaf\n","type_name":"function"},{"html_filename":"fn.path_length_from_key.html","module_info":["sway_libs","merkle","utils"],"name":"path_length_from_key","preview":"Calculates the length of the path to a leaf\n","type_name":"function"},{"html_filename":"enum.ProofError.html","module_info":["sway_libs","merkle","binary_proof"],"name":"ProofError","preview":"","type_name":"enum"},{"html_filename":"constant.LEAF.html","module_info":["sway_libs","merkle","binary_proof"],"name":"LEAF","preview":"Concatenated to leaf hash input as described by<br />\n“MTH({d(0)}) = SHA-256(0x00 || d(0))”\n","type_name":"constant"},{"html_filename":"constant.NODE.html","module_info":["sway_libs","merkle","binary_proof"],"name":"NODE","preview":"Concatenated to node hash input as described by<br />","type_name":"constant"},{"html_filename":"fn.leaf_digest.html","module_info":["sway_libs","merkle","binary_proof"],"name":"leaf_digest","preview":"Returns the computed leaf hash of “MTH({d(0)}) = SHA-256(0x00 || d(0))”.\n","type_name":"function"},{"html_filename":"fn.node_digest.html","module_info":["sway_libs","merkle","binary_proof"],"name":"node_digest","preview":"Returns the computed node hash of “MTH(D[n]) = SHA-256(0x01 || MTH(D[0:k]) || MTH(D[k:n]))”.\n","type_name":"function"},{"html_filename":"fn.process_proof.html","module_info":["sway_libs","merkle","binary_proof"],"name":"process_proof","preview":"This function will compute and return a Merkle root given a leaf and corresponding proof.\n","type_name":"function"},{"html_filename":"fn.verify_proof.html","module_info":["sway_libs","merkle","binary_proof"],"name":"verify_proof","preview":"This function will take a Merkle leaf and proof and return whether the corresponding root<br />","type_name":"function"},{"html_filename":"fn._owner.html","module_info":["sway_libs","ownership"],"name":"_owner","preview":"Returns the owner.\n","type_name":"function"},{"html_filename":"fn.only_owner.html","module_info":["sway_libs","ownership"],"name":"only_owner","preview":"Ensures that the sender is the owner.\n","type_name":"function"},{"html_filename":"fn.renounce_ownership.html","module_info":["sway_libs","ownership"],"name":"renounce_ownership","preview":"Revokes ownership of the current owner and disallows any new owners.\n","type_name":"function"},{"html_filename":"fn.initialize_ownership.html","module_info":["sway_libs","ownership"],"name":"initialize_ownership","preview":"Sets the passed identity as the initial owner.\n","type_name":"function"},{"html_filename":"fn.transfer_ownership.html","module_info":["sway_libs","ownership"],"name":"transfer_ownership","preview":"Transfers ownership to the passed identity.\n","type_name":"function"},{"html_filename":"enum.InitializationError.html","module_info":["sway_libs","ownership","errors"],"name":"InitializationError","preview":"Error log for when access is denied.\n","type_name":"enum"},{"html_filename":"struct.OwnershipRenounced.html","module_info":["sway_libs","ownership","events"],"name":"OwnershipRenounced","preview":"Logged when ownership is renounced.\n","type_name":"struct"},{"html_filename":"struct.OwnershipSet.html","module_info":["sway_libs","ownership","events"],"name":"OwnershipSet","preview":"Logged when ownership is given to a user.\n","type_name":"struct"},{"html_filename":"struct.OwnershipTransferred.html","module_info":["sway_libs","ownership","events"],"name":"OwnershipTransferred","preview":"Logged when ownership is given from one user to another.\n","type_name":"struct"},{"html_filename":"fn.add_admin.html","module_info":["sway_libs","admin"],"name":"add_admin","preview":"","type_name":"function"},{"html_filename":"fn.revoke_admin.html","module_info":["sway_libs","admin"],"name":"revoke_admin","preview":"Removes an administrator.\n","type_name":"function"},{"html_filename":"fn.is_admin.html","module_info":["sway_libs","admin"],"name":"is_admin","preview":"Returns whether <code>admin</code> is an administrator.\n","type_name":"function"},{"html_filename":"fn.only_admin.html","module_info":["sway_libs","admin"],"name":"only_admin","preview":"Ensures that the sender is an administrator.\n","type_name":"function"},{"html_filename":"fn.only_owner_or_admin.html","module_info":["sway_libs","admin"],"name":"only_owner_or_admin","preview":"Ensures that the sender is an owner or administrator.\n","type_name":"function"},{"html_filename":"enum.AdminError.html","module_info":["sway_libs","admin","errors"],"name":"AdminError","preview":"Error log for when access is denied.\n","type_name":"enum"},{"html_filename":"abi.Pausable.html","module_info":["sway_libs","pausable"],"name":"Pausable","preview":"","type_name":"abi"},{"html_filename":"fn._pause.html","module_info":["sway_libs","pausable"],"name":"_pause","preview":"Unconditionally sets the contract to the paused state.\n","type_name":"function"},{"html_filename":"fn._unpause.html","module_info":["sway_libs","pausable"],"name":"_unpause","preview":"Unconditionally sets the contract to the unpaused state.\n","type_name":"function"},{"html_filename":"fn._is_paused.html","module_info":["sway_libs","pausable"],"name":"_is_paused","preview":"Returns whether the contract is in the paused state.\n","type_name":"function"},{"html_filename":"fn.require_paused.html","module_info":["sway_libs","pausable"],"name":"require_paused","preview":"Requires that the contract is in the paused state.\n","type_name":"function"},{"html_filename":"fn.require_not_paused.html","module_info":["sway_libs","pausable"],"name":"require_not_paused","preview":"Requires that the contract is in the unpaused state.\n","type_name":"function"},{"html_filename":"enum.PauseError.html","module_info":["sway_libs","pausable","errors"],"name":"PauseError","preview":"Error emitted upon the opposite of the desired pause state.\n","type_name":"enum"},{"html_filename":"struct.Queue.html","module_info":["sway_libs","queue"],"name":"Queue","preview":"The <code>Queue</code> type corresponds to the same called data structure.\n","type_name":"struct"},{"html_filename":"fn.is_reentrant.html","module_info":["sway_libs","reentrancy"],"name":"is_reentrant","preview":"Returns <code>true</code> if the reentrancy pattern is detected, and <code>false</code> otherwise.","type_name":"function"},{"html_filename":"fn.reentrancy_guard.html","module_info":["sway_libs","reentrancy"],"name":"reentrancy_guard","preview":"Reverts if the reentrancy pattern is detected in the contract in which this is called.\n","type_name":"function"},{"html_filename":"enum.ReentrancyError.html","module_info":["sway_libs","reentrancy","errors"],"name":"ReentrancyError","preview":"Error log for when reentrancy has been detected\n","type_name":"enum"},{"html_filename":"trait.TwosComplement.html","module_info":["sway_libs","signed_integers","common"],"name":"TwosComplement","preview":"Trait for the Two’s Complement of a value.\n","type_name":"trait"},{"html_filename":"enum.Error.html","module_info":["sway_libs","signed_integers","errors"],"name":"Error","preview":"Error log for when unexpected behavior has occurred.\n","type_name":"enum"},{"html_filename":"struct.I8.html","module_info":["sway_libs","signed_integers","i8"],"name":"I8","preview":"The 8-bit signed integer type.\n","type_name":"struct"},{"html_filename":"struct.I16.html","module_info":["sway_libs","signed_integers","i16"],"name":"I16","preview":"The 16-bit signed integer type.\n","type_name":"struct"},{"html_filename":"struct.I32.html","module_info":["sway_libs","signed_integers","i32"],"name":"I32","preview":"The 32-bit signed integer type.\n","type_name":"struct"},{"html_filename":"struct.I64.html","module_info":["sway_libs","signed_integers","i64"],"name":"I64","preview":"The 64-bit signed integer type.\n","type_name":"struct"},{"html_filename":"struct.I128.html","module_info":["sway_libs","signed_integers","i128"],"name":"I128","preview":"The 128-bit signed integer type.\n","type_name":"struct"},{"html_filename":"struct.I256.html","module_info":["sway_libs","signed_integers","i256"],"name":"I256","preview":"The 256-bit signed integer type.\n","type_name":"struct"},{"html_filename":"fn._proxy_target.html","module_info":["sway_libs","upgradability"],"name":"_proxy_target","preview":"Returns the proxy target.\n","type_name":"function"},{"html_filename":"fn._set_proxy_target.html","module_info":["sway_libs","upgradability"],"name":"_set_proxy_target","preview":"Change the target contract of a proxy contract.\n","type_name":"function"},{"html_filename":"fn._proxy_owner.html","module_info":["sway_libs","upgradability"],"name":"_proxy_owner","preview":"Returns the owner of the proxy.\n","type_name":"function"},{"html_filename":"fn.only_proxy_owner.html","module_info":["sway_libs","upgradability"],"name":"only_proxy_owner","preview":"Ensures that the sender is the proxy owner.\n","type_name":"function"},{"html_filename":"fn._set_proxy_owner.html","module_info":["sway_libs","upgradability"],"name":"_set_proxy_owner","preview":"Change proxy ownership to the passed State.\n","type_name":"function"},{"html_filename":"enum.SetProxyOwnerError.html","module_info":["sway_libs","upgradability","errors"],"name":"SetProxyOwnerError","preview":"Error log for when setting proxy owner is denied.\n","type_name":"enum"},{"html_filename":"struct.ProxyTargetSet.html","module_info":["sway_libs","upgradability","events"],"name":"ProxyTargetSet","preview":"Logged when ownership is a new proxy target is set.\n","type_name":"struct"},{"html_filename":"struct.ProxyOwnerSet.html","module_info":["sway_libs","upgradability","events"],"name":"ProxyOwnerSet","preview":"Logged when ownership is a new proxy owner is set.\n","type_name":"struct"}]};
"object"==typeof exports&&"undefined"!=typeof module&&(module.exports=SEARCH_INDEX);